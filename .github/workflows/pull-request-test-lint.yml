name: Validate PR

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - 'hasura/**'

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.17.0
          check-latest: true
          cache: yarn

      - name: Install dependencies
        run: yarn

      - name: lint
        run: yarn lint

  test-client:
    name: Test Client
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.17.0
          check-latest: true
          cache: yarn

      - name: Install dependencies
        run: yarn

      - name: test
        run: yarn test:ci

  test-serverless:
    name: Test Serverless
    environment: test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: kartoza/postgis:12.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASS: postgrespassword
          POSTGRES_DBNAME: postgres
        options: --health-cmd pg_isready --health-interval 30s --health-retries 12
        ports:
          - 5432:5432
      hasura:
        image: hasura/graphql-engine:v2.0.7
        env:
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
          HASURA_GRAPHQL_DEV_MODE: 'true'
          HASURA_GRAPHQL_LOG_LEVEL: debug
          HASURA_GRAPHQL_ENABLED_APIS: 'metadata,graphql'
          HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
          HASURA_GRAPHQL_ADMIN_SECRET: admin_secret
        ports:
          - 8080:8080

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.17.0
          check-latest: true
          cache: yarn

      # HASURA
      - name: Hasura CI/CD
        uses: browniefed/hasura-runner@master
        with:
          args: metadata apply
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_CLI_VERSION: v2.0.7
          HASURA_ENDPOINT: http://172.17.0.1:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Hasura CI/CD
        uses: browniefed/hasura-runner@master
        with:
          args: migrate apply --database-name default
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_CLI_VERSION: v2.0.7
          HASURA_ENDPOINT: http://172.17.0.1:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Hasura CI/CD
        uses: browniefed/hasura-runner@master
        with:
          args: metadata reload
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_CLI_VERSION: v2.0.7
          HASURA_ENDPOINT: http://172.17.0.1:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Hasura CI/CD
        uses: browniefed/hasura-runner@master
        with:
          args: seeds apply --database-name default
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_CLI_VERSION: v2.0.7
          HASURA_ENDPOINT: http://172.17.0.1:8080
          HASURA_ADMIN_SECRET: admin_secret
      # HASURA

      - name: Create env file

        run: |
          touch .env
          echo HASURA_API_URL=${{ secrets.HASURA_API_URL }} >> .env
          echo HASURA_GRAPHQL_ADMIN_SECRET=${{ secrets.HASURA_GRAPHQL_ADMIN_SECRET }} >> .env

      - name: Install dependencies
        run: yarn

      - name: test
        run: |
          yarn test:serverless:ci
        working-directory: hasura
